{"name":"loc","tagline":"Full featured localization module for express.js","body":"# loc\r\n\r\n## Features\r\n * Full featured localization module for express.js\r\n * server side translation\r\n * Pluggable storages\r\n * Pluggable strategies like query, path, cookie ect.\r\n * Url Translation\r\n * Uses common __('...') syntax in app and templates\r\n * Support for plurals\r\n * Stores language files in json files compatible to [webtranslateit](http://webtranslateit.com/) json format\r\n * Adds new strings on-the-fly when first used in your app\r\n * Nested, hierarchical contexts, separated in different files\r\n * Uses the closest to the preferred user locale, if not set explicitely by the user request\r\n * Automatic fallback to more generic localization (http://www.rfc-editor.org/rfc/rfc4647.txt)\r\n * Support for locale names according to http://www.rfc-editor.org/rfc/bcp/bcp47.txt\r\n * No extra parsing needed.\r\n * Handles simultaneous requests with different locales correctly :-)\r\n\r\n## Background\r\nThe module was originally developed by https://github.com/mashpie/i18n-node, then forked and refactored by https://github.com/jeresig/i18n-node-2. This is a serious refactoring of the latter. Reasons:\r\n * were not pluggable / extendable\r\n * not specific to express.js\r\n * complicated code\r\n * features missing: url translation, hierarchical contexts, locale fallback, preferred user locale, ...\r\n\r\n## TODO\r\n * better description\r\n * more tests\r\n * client side translation / routes\r\n * import/export language definitions e.g. gettext\r\n\r\n## Installation\r\n\r\nRun the following:\r\n\r\n\tnpm install loc\r\n\r\n## Usage\r\n\r\n### Load and Configure\r\nIn your app.js:\r\n\r\n\t// example localization initialization\r\n\tvar loc = require('loc')({\r\n\t\t// it gets the locale from the following strategies in this order.\r\n\t\t// if the locale is not part of the `path`it looks it up in the `query` ect.\r\n\t  getLocaleFrom: ['path', 'query', 'subdomain', 'cookie'],\r\n\r\n\t  // if the locale was found in one of the strategies above, it stores it with this strategy.\r\n\t  // in this case in the `cookie`\r\n\t  storeLocaleTo: ['cookie'],\r\n\r\n\t  // the locale definitions (translations) are retrieved from `file`.\r\n\t  storage: 'file',\r\n\r\n\t  // the following locales are supported (optional). \r\n\t  // If this option is omitted, it accetps what ever is defined in the definitions.\r\n\t  locales: ['de', 'de-ch', 'en', 'en-GB', 'en-us'],\r\n\r\n\t  // locale definition director\r\n\t  directory: \"./locales\",\r\n\t  \r\n\t  // locale definition file extension\r\n\t  extension: \".json\",\r\n\r\n\t  // Exclude List for the path rewrite middleware used for the path strategy.\t\r\n\t  // problematic are static assets and url's that start with one to three letters in the path like:\r\n\t  // /p/, /js/ or /img/ and should therefore be excluded.\r\n\t  excludeList: [\".css\", \".js\", '.ico', '/api/', '/img/', '/css/', '/js/']\r\n\t});\r\n\r\n\t// adds all middlewares as bundle\r\n\t//loc.bind(app);\r\n\t//or add them separately\r\n\r\n\t// adds the loc middleware. adds the req.i18n object.\r\n\tapp.use(loc.loc());\r\n\r\n\t// adds the locPathRewrite middleware used for the `path` strategy.\r\n\t// it redirects the request to the url without the locale in the path. e.g. `/en-GB/about` to `/about` \r\n\tapp.use(loc.pathRewrite());\r\n\r\n\t// adds the urlTranslation middleware\r\n\tapp.use(loc.urlTranslation());\r\n\r\n\t// print out localeCache for debugging purposes \r\n\tloc.writeLocaleCache();\r\n\r\n### Inside Your Express View\r\n\r\n\tmodule.exports = {\r\n\t\tindex: function(req, res) {\r\n\t\t\treq.render(\"index\", {\r\n\t\t\t\ttitle: req.i18n.__(\"My Site Title\"),\r\n\t\t\t\tdesc: req.i18n.__(\"My Site Description\")\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n### Inside Your Templates: Swig example\r\n\t{% extends \"page.swig\" %}\r\n\r\n\t{% block content %}\r\n\t<h1>{{ __(\"Welcome to:\") }} {{ title }}</h1>\r\n\t<p>{{ desc }}</p>\r\n\t{% endblock %}\r\n\r\n\r\n### Inside Your Templates: ejs example\r\n\t<head>\r\n\t  <title><%=__(\"title\") %></title>\r\n\t  ...\r\n\r\n## loc API:\r\n\r\n### `__(string, [...])`\r\n\r\nTranslates a string according to the current locale. Also supports sprintf syntax, allowing you to replace text, using the node-sprintf module.\r\n\r\nFor example:\r\n\r\n\tvar greeting = i18n.__('Hello %s, how are you today?', 'Marcus');\r\n\r\nthis puts **Hello Marcus, how are you today?**. You might also add endless arguments or even nest it.\r\n\r\n\tvar greeting = i18n.__('Hello %s, how are you today? How was your %s?', \r\n\t\t'Marcus', i18n.__('weekend'));\r\n\r\nwhich puts **Hello Marcus, how are you today? How was your weekend?**\r\n\r\nYou might even use dynamic variables. They get added to the current locale file if they do not yet exist.\r\n\r\n\tvar greetings = ['Hi', 'Hello', 'Howdy'];\r\n\tfor (var i = 0; i < greetings.length; i++) {\r\n\t\tconsole.log( i18n.__(greetings[i]) );\r\n\t};\r\n\r\nwhich outputs:\r\n\r\n\tHi\r\n\tHello\r\n\tHowdy\r\n\r\n### `__n(one, other, count, [...])`\r\n\r\nDifferent plural forms are supported as a response to `count`:\r\n\r\n\tvar singular = i18n.__n('%s cat', '%s cats', 1);\r\n\tvar plural = i18n.__n('%s cat', '%s cats', 3);\r\n\r\nthis gives you **1 cat** and **3 cats**. As with `__(...)` these could be nested:\r\n\r\n\tvar singular = i18n.__n('There is one monkey in the %%s', 'There are %d monkeys in the %%s', 1, 'tree');\r\n\tvar plural = i18n.__n('There is one monkey in the %%s', 'There are %d monkeys in the %%s', 3, 'tree');\r\n\r\nputting **There is one monkey in the tree** or **There are 3 monkeys in the tree**.\r\n\r\n### `getLocale()`\r\n\r\nReturns a string containing the current locale. If no locale has been specified then it default to the value specified in `defaultLocale`.\r\n\r\n### `setLocale(locale)`\r\n\r\nSets a locale to the specified string. If the locale is unknown, the locale defaults to the one specified by `defaultLocale`. For example if you have locales of 'en' and 'de', and a `defaultLocale` of 'en', then call `.setLocale('ja')` it will be equivalent to calling `.setLocale('en')`.\r\n\r\n### `isPreferredLocale()`\r\n\r\nTo be used with Express.js or another framework that provides a `request` object. This method works if a `request` option has been specified when the i18n object was instantiated.\r\n\r\nThis method returns true if the locale specified by `getLocale` matches a language desired by the browser's `Accept-language` header.\r\n\r\n\r\n## locale definition\r\n\r\n\r\nAn example locale definition `en.js` inside `./locales/` may look something like:\r\n\r\n\t{\r\n\t\t\"Hello\": \"Hello\",\r\n\t\t\"Hello %s, how are you today?\": \"Hello %s, how are you today?\",\r\n\t\t\"weekend\": \"weekend\",\r\n\t\t\"Hello %s, how are you today? How was your %s.\": \"Hello %s, how are you today? How was your %s.\",\r\n\t\t\"Hi\": \"Hi\",\r\n\t\t\"Howdy\": \"Howdy\",\r\n\t\t\"%s cat\": {\r\n\t\t\t\"one\": \"%s cat\",\r\n\t\t\t\"other\": \"%s cats\"\r\n\t\t},\r\n\t\t\"There is one monkey in the %%s\": {\r\n\t\t\t\"one\": \"There is one monkey in the %%s\",\r\n\t\t\t\"other\": \"There are %d monkeys in the %%s\"\r\n\t\t},\r\n\t\t\"tree\": \"tree\"\r\n\t}\r\n\r\nthat file can be edited or just uploaded to [webtranslateit](http://docs.webtranslateit.com/file_formats/) for any kind of collaborative translation workflow.\r\n\r\n## locale definition with contexts example\r\n\r\n### Example Source Files:\r\n\t// locales/en.json\r\n\t{\r\n\t\t\"Home\": \"Start Page\",\r\n\t\t\"Lessons\": \"Lessons\",\r\n\t\t\"About Us\": \"About Us\"\r\n\t}\r\n\r\n\t// locales/de-ch.json\r\n\t{\r\n\t\t\"Home\": \"De Hei\",\r\n\t\t\"Lessons\": \"Lektion\",\r\n\t\t\"About Us\": \"Über üüs\"\r\n\t}\r\n\r\n\t// locales/url/de-ch.json\r\n\t{\r\n\t\t\"title\": \"Tegscht\"\r\n\t}\r\n\r\n\t// locales/url/cms/de-ch.json\r\n\t{\r\n\t\t\"cms title\": \"CMS Überschrift\",\r\n\t\t\"nested\": {\r\n\t\t\t\"keys\": \"Verschachtelt\"\r\n\t\t}\r\n\t}\r\n\r\n\r\n### Queries:\r\n\t// Example 1\r\n\t// locale sep   key        Resulting Value\r\n\t//  ----  ---  ------      ---------------\r\n\t// ['en']['/']['Home'] --> \"Start Page\"\r\n\r\n\t// Example 2\r\n\t//  locale     context     sep     key            Resulting Value\r\n\t//  -------  ------------  ---  -----------      -----------------\r\n\t// ['de-ch']['url']['cms']['/']['cms title'] --> \"CMS Überschrift\"\r\n\r\n\t// Example 3\r\n\t//  locale     context     sep       key              Resulting Value\r\n\t//  -------  ------------  ---  ----------------      ---------------\r\n\t// ['de-ch']['url']['cms']['/']['nested']['keys'] --> \"Verschachtelt\"\r\n\r\n\r\n### localeCache:\r\n\t{\r\n\t\t\"en\": {\r\n\t\t\t\"Home\": \"Start Page\",\r\n\t\t\t\"Lessons\": \"Lessons\",\r\n\t\t\t\"About Us\": \"About Us\"\r\n\t\t},\r\n\t\t\"de-ch\": {\r\n\t\t\t\"/\": {\r\n\t\t\t\t\"Home\": \"De Hei\",\r\n\t\t\t\t\"Lessons\": \"Lektion\",\r\n\t\t\t\t\"About Us\": \"Über üüs\"\r\n\t\t\t},\r\n\t\t\t\"url\": {\r\n\t\t\t\t\"/\": {\r\n\t\t\t\t\t\"title\": \"Tegscht\"\r\n\t\t\t\t},\r\n\t\t\t\t\"cms\": {\r\n\t\t\t\t\t\"/\": {\r\n\t\t\t\t\t\t\"cms title\": \"CMS Überschrift\",\r\n\t\t\t\t\t\t\"nested\": {\r\n\t\t\t\t\t\t\t\"keys\": \"Verschachtelt\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n## tests\r\nrun the tests with \r\n\r\n\tmocha\r\n\r\n\r\n## license\r\n\r\n[MIT License](https://github.com/intesso/loc/blob/master/LICENSE)\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}